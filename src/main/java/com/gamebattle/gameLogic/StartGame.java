package com.gamebattle.gameLogic;

/**
 *  –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã
 */

import com.gamebattle.Location.LocationAndLore;
import com.gamebattle.character.Character;
import com.gamebattle.character.CharacterClassLevel;
import com.gamebattle.character.LevelManager;
import com.gamebattle.customExceptions.CharacterCreationException;
import com.gamebattle.gameUtils.SleepTime;
import java.util.List;
import java.util.Scanner;

public class StartGame {

    private static Character player;
    public static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws CharacterCreationException {
        GameState.resetAll();

//        welcomeMessage();
//        getGameInformation();
        getCharacter();
//        getIntroductionInformation();
        startGameLoop();
    }

    public static void welcomeMessage() {
        SleepTime.sleepSeconds(1);
        System.out.println("\n\n====================================================================");
        SleepTime.sleep(300);
        System.out.println("\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Epic Battle Game");
    }

    public static void getGameInformation() {
        SleepTime.sleepSeconds(1);
        System.out.println("\n–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: \n");
        SleepTime.sleepSeconds(1);

        String[] rules = {
                "1. –í –Ω–∞—á–∞–ª–µ –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–≤–æ–∏–Ω, –≤–∞—Ä–≤–∞—Ä –∏–ª–∏ —Ä–∞–∑–±–æ–π–Ω–∏–∫).",
                "   –£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –µ—Å—Ç—å 3 –∞—Ç—Ä–∏–±—É—Ç–∞:",
                "   ‚Ä¢ –°–∏–ª–∞: –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —É—Ä–æ–Ω—É –æ—Ç –æ—Ä—É–∂–∏—è.",
                "   ‚Ä¢ –õ–æ–≤–∫–æ—Å—Ç—å: –ø–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –∏–ª–∏ —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –æ—Ç –∞—Ç–∞–∫–∏.",
                "   ‚Ä¢ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –∑–¥–æ—Ä–æ–≤—å—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è.",
                "   –£ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–Ω–∏ —Ä–∞–≤–Ω—ã —Å–ª—É—á–∞–π–Ω–æ–º—É —á–∏—Å–ª—É –æ—Ç 1 –¥–æ 3 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.",
                "",
                "2. –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –º–æ–Ω—Å—Ç—Ä–æ–º:",
                "   –ë–æ–π –∏–¥—ë—Ç –ø–æ —Ö–æ–¥–∞–º, –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏ –º–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏. –ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ –≤—ã—à–µ",
                "   –ª–æ–≤–∫–æ—Å—Ç—å. –ï—Å–ª–∏ –æ–Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è, —Ç–æ –ø–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂.",
                "   ‚Ä¢ –ü—Ä–∏ –∞—Ç–∞–∫–µ —Å–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è: –±–µ—Ä—ë—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–æ —Å—É–º–º—ã",
                "     –ª–æ–≤–∫–æ—Å—Ç–∏ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏ —Ü–µ–ª–∏. –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ª–æ–≤–∫–æ—Å—Ç–∏ —Ü–µ–ª–∏ - –∞—Ç–∞–∫–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∞—Å—å",
                "     (–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ö–æ–¥–∞ —Ç—ã –±—É–¥–µ—à—å –≤–∏–¥–µ—Ç—å –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã–ø–∞–ª–æ –∏ –∫–∞–∫–æ–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–∏).",
                "   ‚Ä¢ –ï—Å–ª–∏ –∞—Ç–∞–∫–∞ –ø–æ–ø–∞–ª–∞, —Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω: —ç—Ç–æ —É—Ä–æ–Ω –æ—Ä—É–∂–∏—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ + –µ–≥–æ —Å–∏–ª–∞.",
                "   ‚Ä¢ –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –∞—Ç–∞–∫–∏ —É –∞—Ç–∞–∫—É—é—â–µ–≥–æ (–ü–æ—Ä—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é, –Ø—Ä–æ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ).",
                "   ‚Ä¢ –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —É—Ä–æ–Ω —Ü–µ–ª–∏ (–ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞, –©–∏—Ç –∏ –¥—Ä—É–≥–∏–µ).",
                "   ‚Ä¢ –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–Ω –±–æ–ª—å—à–µ 0 - –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –∑–¥–æ—Ä–æ–≤—å—è —Ü–µ–ª–∏.",
                "   ‚Ä¢ –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ —Ü–µ–ª–∏ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ 0 –∏–ª–∏ –Ω–∏–∂–µ - –±–æ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –∞—Ç–∞–∫—É—é—â–µ–≥–æ.",
                "   ‚Ä¢ –ï—Å–ª–∏ —Ü–µ–ª—å –≤—ã–∂–∏–ª–∞, —Ç–æ —Ç–µ–ø–µ—Ä—å –µ—ë –æ—á–µ—Ä–µ–¥—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—É–Ω–∫—Ç—É 1.",
                "   ‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–æ—è –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–æ –º–∞–∫—Å–∏–º—É–º–∞. –ó–∞—Ç–µ–º –∏–≥—Ä–æ–∫—É –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç",
                "     –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
                "   ‚Ä¢ –ö–∞–∫ –∏ –≤ \"—Å–µ—Ä—å—ë–∑–Ω—ã—Ö\" RPG, —É –Ω–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–∞:",
                "     –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∫–ª–∞—Å—Å, —Å –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –Ω–∞—á–∞–ª –∏–≥—Ä—É, –Ω–æ –∏ –ª—é–±–æ–π",
                "     –¥—Ä—É–≥–æ–π. –¢–æ–≥–¥–∞ –æ–Ω –ø–æ–ª—É—á–∏—Ç +1 —É—Ä–æ–≤–µ–Ω—å –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ, –∏ –≤—Å–µ –±–æ–Ω—É—Å—ã –æ—Ç —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
                "   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É–º–º–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - 3. –ö–æ–≥–¥–∞ –æ–Ω –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –∏–≥—Ä–æ–∫—É –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç",
                "     –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –ø–æ—Å–ª–µ –±–æ—è —Ç–æ–ª—å–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—å–µ.",
                "",
                "4. –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–æ–∏–≥—Ä–∞–ª - –∏–≥—Ä–æ–∫—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
                "5. –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–±–µ–¥–∏–ª 5 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥ - –∏–≥—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞."
        };

        for (String line : rules) {
            System.out.println(line);
            SleepTime.sleep(300);
        }

        SleepTime.sleepSeconds(1);
        System.out.println("\n–ù–∞ —ç—Ç–æ–º –≤—Å—ë, –∂–µ–ª–∞—é —É–¥–∞—á–∏ –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏–≥—Ä—ã!");
        SleepTime.sleep(300);
        System.out.println("====================================================================\n");
    }

    public static void getIntroductionInformation() {
        SleepTime.sleepSeconds(1);
        LocationAndLore.getIntroduction();
    }

    public static void getCharacter() throws CharacterCreationException {
        SleepTime.sleepSeconds(1);
        System.out.println("\n–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞...");

        SleepTime.sleepSeconds(2);
        System.out.println("\n–í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.");
        SleepTime.sleep(300);
        player = CreateCharacter.createNewCharacter();
        GameState.setCurrentPlayer(player);

        SleepTime.sleep(300);
        System.out.println("–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏...");
        SleepTime.sleep(500);
        System.out.println("–°–ø–∞–≤–Ω–∏–º –º–æ–Ω—Å—Ç—Ä–æ–≤...");
        SleepTime.sleep(700);
        System.out.println("–ù–∞–¥–µ–ª—è–µ–º –≤–∞—Å —Å–∏–ª–æ–π...");
        SleepTime.sleepSeconds(1);
        System.out.println("\n–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n");
        SleepTime.sleepSeconds(1);
    }

    public static void startGameLoop() {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
        LocationAndLore.Location currentLocation = LocationNavigation.getStartLocation();
        boolean gameCompleted = false;

        while (currentLocation != null && !gameCompleted) {
            LocationNavigation.displayCurrentLocations();

            // –ü—Ä–æ–≤–æ–¥–∏–º –±–æ–π
            BattleResult result = Battle.startBattle(player, currentLocation.monster);

            if (result.isVictory()) {
                gameCompleted = handleVictory(player, currentLocation); // ‚Üê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if (!gameCompleted) {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ª–æ–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    currentLocation = LocationNavigation.getNextLocations();
                }
            } else {
                if (handleDefeat(player)) {
                    break; // –ò–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏
                }
                // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                currentLocation = LocationNavigation.getStartLocation();
            }
        }

        if (gameCompleted) {
            System.out.println("üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        } else if (currentLocation == null) {
            System.out.println("üéâ –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω—ã!");
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    private static void resetEverything() {
        System.out.println("\nüåÄ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏–≥—Ä—ã...");
        SleepTime.sleepSeconds(1);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        GameState.resetAll();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        player = null;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ —Å–∏—Å—Ç–µ–º—ã
        BattleSystem.monstersDefeated = 0;
    }

    private static boolean handleVictory(Character player, LocationAndLore.Location location) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞
        if (BattleSystem.monstersDefeated >= 5) {
            return true; // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≤–æ–∑–≤—Ä–∞—Ç
        }

        BattleSystem.monstersDefeated++;

        BattleSystem.restoreHealth(player);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –∏ –≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (BattleSystem.checkVictory(player)) {
            return true; // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≤–æ–∑–≤—Ä–∞—Ç
        }

        // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–º–µ–Ω—É –æ—Ä—É–∂–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
        BattleSystem.offerWeaponDrop(player, location.monster);

        // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        LevelManager.levelUpCharacter(player);
        LevelManager.levelUpClass(player);

        printFinalCharacterInfo(player);

        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–µ–π
        waitForContinue();

        // –≤–æ–∑–≤—Ä–∞—Ç (–∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è)
        return false;
    }

    private static boolean handleDefeat(Character character) {
        System.out.printf("""
                    %n
                    +------------------------------------------+
                    |                –ö–û–ù–ï–¶  –ò–ì–†–´               |
                    +------------------------------------------+
                    |          üíÄ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –º—ë—Ä—Ç–≤           |
                    |                                          |
                    | –ò–º—è: %-35s |
                    | –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: %-21d |
                    | –û—Ä—É–∂–∏–µ: %-32s |
                    +------------------------------------------+
                    """,
                character.getName(),
                character.getCharacterLevel(),
                character.getMainClass().getStartWeapon().getName()
        );

        // –ü–û–õ–ù–´–ô –°–ë–†–û–° –í–°–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´
        resetEverything();

        System.out.println("\n\n=========================================================\n");

        // —Ö–æ—á–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        while (true) {
            System.out.print("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (–¥–∞/–Ω–µ—Ç):  ");
            String answer = scanner.nextLine().toLowerCase();

            if (answer.equals("–¥–∞") || answer.equals("–¥") || answer.equals("yes") || answer.equals("y")) {
                try {
                    // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    resetEverything();
                    getCharacter();
                    return false; // –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                } catch (CharacterCreationException e) {
                    System.out.println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " + e.getMessage());
                    return true;
                }
            } else if (answer.equals("–Ω–µ—Ç") || answer.equals("–Ω") || answer.equals("no") || answer.equals("n")) {
                return true;
            } else {
                System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'");
            }
        }
    }

    public static boolean gameIsOver(Character character) {
        System.out.printf("""
                    %n
                    +------------------------------------------+
                    |              –ò–ì–†–ê –ü–†–û–ô–î–ï–ù–ê               |
                    +------------------------------------------+
                    |         –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!           |
                    |      –í—ã –ø–æ–±–µ–¥–∏–ª–∏ 5 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥!      |
                    +------------------------------------------+
                    """
        );

        printFinalCharacterInfo(character);

        // –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        resetEverything();

        System.out.println("\n\n============================================\n");

        // —Ö–æ—á–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        while (true) {
            System.out.print("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (–¥–∞/–Ω–µ—Ç):  ");
            String answer = scanner.nextLine().toLowerCase();

            if (answer.equals("–¥–∞") || answer.equals("–¥") || answer.equals("yes") || answer.equals("y")) {
                try {
                    // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    resetEverything();
                    getCharacter();
                    return false; // –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                } catch (CharacterCreationException e) {
                    System.out.println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " + e.getMessage());
                    return true; // –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                }
            } else if (answer.equals("–Ω–µ—Ç") || answer.equals("–Ω") || answer.equals("no") || answer.equals("n")) {
                return true; // –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
            } else {
                System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'");
            }
        }
    }

    private static void waitForContinue() {
        System.out.println("\n\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è... ");
        try {
            scanner.nextLine();
        } catch (Exception e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞
        }
    }

    public static void printFinalCharacterInfo(Character character) {
        StringBuilder classesBuilder = new StringBuilder();
        List<CharacterClassLevel> classes = character.getClasses();

        for (int i = 0; i < classes.size(); i++) {
            if (i > 0) {
                classesBuilder.append(", ");
            }
            classesBuilder.append(classes.get(i).toString());
        }
        String classesString = classesBuilder.toString();

        String[] characterInfo = {
                "",
                "+------------------------------------------+",
                "|          –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ï–†–°–û–ù–ê–ñ–ï          |",
                "+------------------------------------------+",
                String.format("| –ò–º—è: %-35s |", character.getName()),
                String.format("| –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: %-21d |", character.getCharacterLevel()),
                String.format("| –ö–ª–∞—Å—Å—ã: %-32s |", classesString),
                "+------------------------------------------+",
                String.format("| –ó–¥–æ—Ä–æ–≤—å–µ: %-30.1f |", character.getHealth()),
                String.format("| –°–∏–ª–∞: %-34d |", character.getStrength()),
                String.format("| –õ–æ–≤–∫–æ—Å—Ç—å: %-30d |", character.getAgility()),
                String.format("| –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: %-26d |", character.getEndurance()),
                "+------------------------------------------+",
                String.format("| –û—Ä—É–∂–∏–µ: %-32s |", character.getMainClass().getStartWeapon().getName()),
                String.format("| –£—Ä–æ–Ω –æ—Ä—É–∂–∏—è: %-27d |", character.getMainClass().getStartWeapon().getDamage()),
                String.format("| –ë–æ–Ω—É—Å —É—Ä–æ–Ω–∞ –æ—Ç —Å–∏–ª—ã: %-19d |", character.getStrength()),
                String.format("| –û–±—â–∏–π —É—Ä–æ–Ω: %-28d |", character.getMainClass().getStartWeapon().getDamage() +
                                                        character.getStrength()),
                "+------------------------------------------+"
        };

        for (String line : characterInfo) {
            System.out.println(line);
            SleepTime.sleep(300);
        }
    }
}