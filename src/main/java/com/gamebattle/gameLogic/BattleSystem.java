package com.gamebattle.gameLogic;

/**
 *  –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–µ—Ö–∞–Ω–∏–∫ –±–∏—Ç–≤—ã (–º–µ—Ç–æ–¥—ã –∞—Ç–∞–∫–∏, —É–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Ç.–¥.)
 */

import com.gamebattle.character.Rogue;
import com.gamebattle.monsters.Monster;
import com.gamebattle.character.Character;

public class BattleSystem {

    public static int monstersDefeated = 0;


    // –º–µ—Ç–æ–¥ –ø–æ–±–µ–¥—ã –µ—Å–ª–∏ –±—ã–ª–æ –ø–æ–±–µ–∂–¥–µ–Ω–æ 5 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥
    public static void checkVictory(int monstersDefeated) {
        if (monstersDefeated >= 5) {
            System.out.println("üéâ –ü–û–ë–ï–î–ê! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ 5 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥!");
        }
    }

    // –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —Ö–ø –¥–æ –º–∞–∫—Å–∏–º—É–º–∞ –ø—Ä–∏ –ø–æ–±–µ–¥–µ
    public static void restoreHealth(Character player) {
        if (player != null) {
            player.restoreHealth();
            System.out.println(player.getName() + " –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ!");
        }
    }

    // –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–ª–∞–≥–∞—é—â–∏–π –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –º–æ–±–∞
    public static void offerWeaponDrop(Character player, Monster monster) {
        System.out.println("–ú–æ–Ω—Å—Ç—Ä –≤—ã–±—Ä–æ—Å–∏–ª –æ—Ä—É–∂–∏–µ! –•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å?");
        // –ª–æ–≥–∏–∫–∞ –∑–∞–º–µ–Ω—ã –æ—Ä—É–∂–∏—è
    }

    // –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∏–≥—Ä–æ–∫–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏
    public static void playerDefeated() {

        // –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–±–µ–∂–¥–µ–Ω: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω—ã—Ö
        // –º–æ–Ω—Å—Ç—Ä–æ–≤, –µ—Å–ª–∏ –±—ã–ª–∏.
        // –°–ø—Ä–∞—à–∏–≤–µ–º —Ö–æ—á–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –µ—Å–ª–∏ –¥–∞ —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã—Ö–æ–¥.
        System.out.println("–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≤–µ—Ä–∂–µ–Ω!");

        LocationNavigation.resetUsedLocations();
        // –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    }

    public static double calculateHitChance(Character attacker, Monster target) {
        // –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–≤–∫–æ—Å—Ç–∏ (c–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–æ —Å—É–º–º—ã (–ª–æ–≤–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –±–æ—è + –ª–æ–≤–∫–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–∞)
        // –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ª–æ–≤–∫–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞ - –ø—Ä–æ–º–∞—Ö, –∏–Ω–∞—á–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ.
        return 5.0;
    }

    public static double calculateEvasionChance(Character defender, Monster attacker) {
        // –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–≤–∫–æ—Å—Ç–∏ (–∏ –µ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ —à–∞–Ω—Å–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è: —Ç.–µ. –∫–æ–≥–¥–∞
        // —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è —É –º–æ–Ω—Å—Ç—Ä–∞: c–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–æ —Å—É–º–º—ã (–ª–æ–≤–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –±–æ—è + –ª–æ–≤–∫–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–∞)
        // –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω–∞—à–µ–π –ª–æ–≤–∫–æ—Å—Ç–∏ - –º—ã —É–∫–ª–æ–Ω—è–µ–º—Å—è. –ï—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω–∞—à–µ–π –ª–æ–≤–∫–æ—Å—Ç–∏ - –º—ã –ø–æ–ª—É—á–∞–µ–º —É–¥–∞—Ä).
        return 2.0;
    }

    // –º–µ—Ç–æ–¥ –¥–ª—è –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞
    public static boolean playerAttack(Character player, Monster monster) {
        // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ (–ª–æ–≤–∫–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ + –ª–æ–≤–∫–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–∞)
        int randomRoll = (int) (Math.random() * (player.getAgility() + monster.getAgility())) + 1;

        if (randomRoll <= monster.getAgility()) {
            // –ü—Ä–æ–º–∞—Ö - —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ª–æ–≤–∫–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞
            System.out.println(player.getName() + " –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è! (–≤—ã–ø–∞–ª–æ: " + randomRoll + ", –ª–æ–≤–∫–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–∞: " + monster.getAgility() + ")");
            return false;
        } else {
            // –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            int baseDamage = player.getTotalDamage();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å —Å–∫—Ä—ã—Ç–æ–π –∞—Ç–∞–∫–∏ –¥–ª—è —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞
            if (player.getMainClass() instanceof Rogue) {
                Rogue rogueClass = (Rogue) player.getMainClass();
                int sneakAttackBonus = rogueClass.applySneakAttackBonus(player, monster);
                baseDamage += sneakAttackBonus;
            }

            System.out.println(player.getName() + " –∞—Ç–∞–∫—É–µ—Ç " + monster.getName() + " –∏ –Ω–∞–Ω–æ—Å–∏—Ç " + baseDamage + " —É—Ä–æ–Ω–∞!");
            monster.takeDamage(baseDamage);
            return true;
        }
    }

    // –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω—Å—Ç—Ä–∞
    public static double calculateMonsterHitChance(Monster attacker, Character target) {
        return 50.0 + (attacker.getAgility() * 5) - (target.getAgility() * 3);
    }

    public static double calculateMonsterEvasionChance(Monster defender, Character attacker) {
        return 20.0 + (defender.getAgility() * 4);
    }

    //  –º–µ—Ç–æ–¥ –¥–ª—è –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞
    public static boolean monsterAttack(Monster monster, Character player) {
        // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ (–ª–æ–≤–∫–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–∞ + –ª–æ–≤–∫–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞)
        int randomRoll = (int) (Math.random() * (monster.getAgility() + player.getAgility())) + 1;

        if (randomRoll <= player.getAgility()) {
            // –ò–≥—Ä–æ–∫ —É–∫–ª–æ–Ω–∏–ª—Å—è - —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ª–æ–≤–∫–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
            System.out.println(player.getName() + " —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –∞—Ç–∞–∫–∏! (–≤—ã–ø–∞–ª–æ: " + randomRoll + ", –ª–æ–≤–∫–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞: " + player.getAgility() + ")");
            return false;
        } else {
            // –ü–æ–ø–∞–¥–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞
            System.out.println("–ú–æ–Ω—Å—Ç—Ä " + monster.getName() + " –∞—Ç–∞–∫—É–µ—Ç " + player.getName() + " –∏ –Ω–∞–Ω–æ—Å–∏—Ç " + monster.getWeaponDamage() + " —É—Ä–æ–Ω–∞!");
            player.takeDamage(monster.getWeaponDamage());
            return true;
        }
    }
}



//    public double getHitChance() {
//        // –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–≤–∫–æ—Å—Ç–∏ (c–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–æ —Å—É–º–º—ã (–ª–æ–≤–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –±–æ—è + –ª–æ–≤–∫–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–∞)
//        // –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ª–æ–≤–∫–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞ - –ø—Ä–æ–º–∞—Ö, –∏–Ω–∞—á–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ.
//        return 1.0;
//    }
//
//    public double getEvasionChance() {
//        // –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–≤–∫–æ—Å—Ç–∏ (–∏ –µ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ —à–∞–Ω—Å–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è: —Ç.–µ. –∫–æ–≥–¥–∞
//        // —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è —É –º–æ–Ω—Å—Ç—Ä–∞: c–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–æ —Å—É–º–º—ã (–ª–æ–≤–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –±–æ—è + –ª–æ–≤–∫–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–∞)
//        // –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω–∞—à–µ–π –ª–æ–≤–∫–æ—Å—Ç–∏ - –º—ã —É–∫–ª–æ–Ω—è–µ–º—Å—è. –ï—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω–∞—à–µ–π –ª–æ–≤–∫–æ—Å—Ç–∏ - –º—ã –ø–æ–ª—É—á–∞–µ–º —É–¥–∞—Ä).
//        return 2.0;
//    }