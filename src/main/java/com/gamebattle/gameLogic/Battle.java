package com.gamebattle.gameLogic;

/**
 *  –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –±–æ—è
 */

import com.gamebattle.character.Character;
import com.gamebattle.monsters.Monster;
import static com.gamebattle.gameLogic.BattleSystem.calculateEvasionChance;
import static com.gamebattle.gameLogic.BattleSystem.calculateHitChance;
import static com.gamebattle.gameLogic.BattleSystem.calculateMonsterEvasionChance;
import static com.gamebattle.gameLogic.BattleSystem.calculateMonsterHitChance;

public class Battle {

//    public static void startBattle(Character player, LocationAndLore.Location location) {
//
//
//        Monster monster = location.monster;
//
//        System.out.println("‚öîÔ∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π —Å " + monster.getName() + "!");
//
//        // –ë–æ–µ–≤–∞—è –ª–æ–≥–∏–∫–∞
//        while (player.isAlive() && monster.isAlive()) {
//
//            // 1. –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –°–∏—Å—Ç–µ–º–µ –±–∏—Ç–≤—ã –∏ —É–∑–Ω–∞–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º (—É –∫–æ–≥–æ –≤—ã—à–µ –ª–æ–≤–∫–æ—Å—Ç—å —Ç–æ—Ç –∏ –ø–µ—Ä–≤—ã–π —Ö–æ–¥–∏—Ç)
//            // 2. —Ç–æ—Ç –∫—Ç–æ —Ö–æ–¥–∏—Ç –¥–µ–ª–∞–µ—Ç –∞—Ç–∞–∫—É.
//            //
//
//            // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
//            BattleSystem.playerAttack(player,monster);
//            if (!monster.isAlive()) {
//                System.out.println("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ " + monster.getName() + "!");
//
//                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä—É–∂–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
//                // player.addToInventory(reward);
//                victoryBattle(player);
//                break;
//            }
//
//            // –•–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞
//            BattleSystem.monsterAttack(monster,player);
//            if (!player.isAlive()) {
//                System.out.println("üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏...");
//                defeatBattle(player);
//                break;
//            }
//        }
//    }

//    // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∞ –≤ –±–∏—Ç–≤–µ
//    public static void victoryBattle(Character player) {
//
//            monstersDefeated++;
//            BattleSystem.checkVictory(monstersDefeated);
//            BattleSystem.restoreHealth(player);
//
//            LevelManager.levelUpCharacter(player);
//            LevelManager.levelUpClass(player);
//
//            printFinalCharacterInfo(player);
//
//            // —Å–ª–µ–¥—É—é—â–∞—è –ª–æ–∫–∞
//            while (LocationNavigation.getRemainingLocationsCount() > 0) {
//                System.out.println("-------------------------------------------------------");
//                System.out.println("|| –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–∏... ||");
//                System.out.println("-------------------------------------------------------");
//                try {
//                    System.in.read();
//                } catch (Exception e) {
//                    throw new RuntimeException(e);
//                }
//
//                LocationNavigation.getNextLocations();
//                LocationNavigation.displayCurrentLocations();
//
//                Battle.startBattle(player, currentLocation);
//
//                // –µ—Å–ª–∏ –ø–æ–±–µ–¥–∞ - –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π, –≤—ã–∑–æ–≤ printFinal
//            }
//    }
//
//    public static void defeatBattle(Character player) {
//
//    }

    public static BattleResult startBattle(Character player, Monster monster) {
        System.out.println("=======================================================");
        System.out.println("\t\t\t‚öîÔ∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π —Å " + monster.getName() + "!");
        System.out.println("=======================================================");
        showBattleInfo(player, monster);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        boolean playerFirst = determineFirstTurn(player, monster);


        BattleResult result = new BattleResult();

        while (player.isAlive() && monster.isAlive()) {
            if (playerFirst) {
                playerTurn(player, monster, result);
                if (!monster.isAlive()) {
                    System.out.println("------------------------------------");
                    System.out.println(monster.getName() + " –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!");
                    System.out.println("------------------------------------");
                    break;
                }


                monsterTurn(monster, player, result);
            } else {
                monsterTurn(monster, player, result);
                if (!player.isAlive()) break;
                playerTurn(player, monster, result);
            }
        }

        result.setVictory(player.isAlive());
        return result;
    }

    private static boolean determineFirstTurn(Character player, Monster monster) {
        if (player.getAgility() > monster.getAgility()) {
            System.out.println("\n–ü–µ—Ä–≤—ã–º –Ω–∞—á–∏–Ω–∞–µ—Ç —Ö–æ–¥ " + player.getName() + "!\n");
            return true;
        } else if (monster.getAgility() > player.getAgility()) {
            System.out.println("\n–ü–µ—Ä–≤—ã–º –Ω–∞—á–∏–Ω–∞–µ—Ç —Ö–æ–¥ " + monster.getName() + "!\n");
            return false;
        } else {
            System.out.println("\n–ü–µ—Ä–≤—ã–º –Ω–∞—á–∏–Ω–∞–µ—Ç —Ö–æ–¥ " + player.getName() + "!\n");
            return true;
        }
    }

    private static void playerTurn(Character player, Monster monster, BattleResult result) {
        boolean hit = BattleSystem.playerAttack(player, monster);
        result.addPlayerAttack(hit);
    }

    private static void monsterTurn(Monster monster, Character player, BattleResult result) {
        boolean hit = BattleSystem.monsterAttack(monster, player);
        result.addMonsterAttack(hit);
    }

    public static void showBattleInfo(Character player, Monster monster) {
        double playerHitChance = calculateHitChance(player, monster);
        double playerEvasionChance = calculateEvasionChance(player, monster);
        double monsterHitChance = calculateMonsterHitChance(monster, player);
        double monsterEvasionChance = calculateMonsterEvasionChance(monster, player);

        System.out.printf("""
                –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–ï:

                %s:
                - –£—Ä–æ–Ω: %d
                - –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è: %.1f%%
                - –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è: %.1f%%

                %s:
                - –£—Ä–æ–Ω: %d
                - –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è: %.1f%%
                - –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è: %.1f%%
                %n""",
                player.getName(), player.getTotalDamage(), playerHitChance, playerEvasionChance,
                monster.getName(), monster.getWeaponDamage(), monsterHitChance, monsterEvasionChance
        );
        System.out.println("-------------------------------------------------------");
    }
}
